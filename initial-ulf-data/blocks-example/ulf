; How many blocks are facing any corner of the table?
((((nquan (How.mod-a many.a)) (plur block.n)) ((pres prog) (face.v (any.d (corner-of.n (the.d table.n)))))) ?)

; How many stacks are on the table?
((((nquan (How.mod-a many.a)) (plur stack.n)) ((pres be.v) (on.p (the.d table.n)))) ?)

; How many rows are on the table?
((((nquan (How.mod-a many.a)) (plur row.n)) ((pres be.v) (on.p (the.d table.n)))) ?)

; How many blocks are on the left side of the table?
((((nquan (How.mod-a many.a)) (plur block.n)) ((pres be.v) (on.p (the.d (left.a (side-of.n (the.d table.n))))))) ?)

; How many blocks are in the tallest stack?
((((nquan (How.mod-a many.a)) (plur block.n)) ((pres be.v) (in.p (the.d (most-n tall.a stack.n))))) ?)

; How many blocks are in the longest row?
((((nquan (How.mod-a many.a)) (plur block.n)) ((pres be.v) (in.p (the.d (most-n long.a row.n))))) ?)

; How many block are between any two stacks?
((((nquan (How.mod-a many.a)) (plur block.n)) ((pres be.v) (between.p (any.d (two.a (plur stack.n)))))) ?)

; How many blocks are clear?
((((nquan (How.mod-a many.a)) (plur block.n)) ((pres be.v) clear.a)) ?)

; How many blocks are in some row or stack?
((((nquan (How.mod-a many.a)) (plur block.n)) ((pres be.v) (in.p (some.d (row.n or.cc stack.n))))) ?)

; How many blocks are not touching the table?
((((nquan (How.mod-a many.a)) (plur block.n)) ((pres prog) not.adv-s (touch.v (the.d table.n)))) ?)

; What are the blocks on top of the Toyota block?
((What.pro ((pres be.v) (= (the.d (n+preds (plur block.n) (on_top_of.p (the.d (|Toyota|.n block.n)))))))) ?)

; What are the blocks that are not on top of any other block?
((What.pro ((pres be.v) (= (the.d (n+preds (plur block.n) (that.rel ((pres be.v) not.adv-s (on_top_of.p (any.d (other.a block.n)))))))))) ?)

; What is the block closest to the rightmost red block?
((What.pro ((pres be.v) (= (the.d (n+preds block.n (most-n (close_to.p (the.d (most-n right.a (red.a block.n))))) {block}.n))))) ?)

; What is the block between the Toyota and the SRI block?
((What.pro ((pres be.v) (= (the.d (n+preds block.n (between.p ((the.d (|Toyota|.n {block}.n)) and.cc (the.d (|SRI|.n block.n))))))))) ?)

; What are the blocks near the corners of the table?
((What.pro ((pres be.v) (= (the.d (plur (n+preds block.n (near.p (the.d (plur (corner-of.n (the.d table.n))))))))))) ?)

; What is the block closest to the front edge of the table?
((What.pro ((pres be.v) (= (the.d (n+preds block.n (most-n (close_to.p (the.d (front.a (edge-of.n (the.d table.n)))))) {block}.n))))) ?)

; What is the block on top of the tallest stack?
((What.pro ((pres be.v) (= (the.d (n+preds block.n (on_top_of.p (the.d (most-n tall.a stack.n)))))))) ?)

; What is the the blocks behind the Nvidia block?
((What.pro ((pres be.v) (= (the.d (n+preds (plur block.n) (behind.p (the.d (|Nvidia|.n block.n)))))))) ?)

; What is the block that is at the rightmost red block?
((What.pro ((pres be.v) (= (the.d (n+preds block.n (that.rel ((pres be.v) (at.p (the.d (most-n right.a (red.a block.n))))))))))) ?)

; Which block is the highest?
(((Which.d block.n) ((pres be.v) (= (the.d (most-n high.a {block}.n))))) ?)

; Which block is on two other blocks?
(((Which.d block.n) ((pres be.v) (on.p (two.d (other.a (plur block.n)))))) ?)

; Which block is in the center of the table?
(((Which.d block.n) ((pres be.v) (in.p (the.d (center-of.n (the.d table.n)))))) ?)

; What blocks are in the longest row?
(((What.d (plur block.n)) ((pres be.v) (in.p (the.d (most-n long.a row.n))))) ?)

; What block is halfway on top of any other block?
(((What.d block.n) ((pres be.v) (halfway.adv-a (on_top_of.p (any.d (other.a block.n)))))) ?)

; Which block is side by side with the Texaco block?
(((Which.d block.n) ((pres be.v) (side_by_side_with.p (the.d (|Texaco|.n block.n))))) ?)

; What is the farthest block from the center of the table?
((what.pro ((pres be.v) (the.d (rep (sub (most-n (far_from.p *p)) (n+preds block.n *h)) (the.d (center-of.n (the.d table.n))))))) ?)

; Which block the Nvidia block is on top of?
((sub (Which.d block.n) ((the.d (|Nvidia|.n block.n)) ((pres be.v) (on_top_of.p *h)))) ?)

; Which block is very close to the front edge of the table?
(((Which.d block.n) ((pres be.v) (adv-a (very.mod-a (close_to.p (the.d (front.a (edge-of.n (the.d table.n))))))))) ?)

; What is in the middle of the table?
((What.pro ((pres be.v) (in.p (the.d (middle-of.n (the.d table.n)))))) ?)

; Which red block is the closest to the Toyota block?
(((Which.d (red.a block.n)) ((pres be.v) (the.d (most-n (close_to.p (the.d (|Toyota|.n block.n))) ({red}.a {block}.n))))) ?)

; Which red blocks are directly on the table?
(((Which.d (red.a (plur block.n))) ((pres be.v) (directly.adv-a (on.p (the.d table.n))))) ?)

; Which blue block the Nvidia block is not near to?
((sub (which.d (blue.a block.n)) ((the.d (|Nvidia| block.n)) ((pres be.v) not.adv-s (near_to.p *h)))) ?)

; Is the Nvidia block to the left of the Texaco block?
(((pres be.v) (the.d (|Nvidia| block.n)) (to_the_left_of.p (the.d |Texaco| block.n))) ?)

; Is the McDonalds block on top of the SRI block?
(((pres be.v) (the.d (|McDonalds| block.n)) (on_top_of.p (the.d (|SRI| block.n)))) ?)

; Is the Starbucks block near the Toyota block?
(((pres be.v) (the.d (|Starbucks| block.n)) (near.p (the.d (|Toyota| block.n)))) ?))

; Is the Toyota block between the Nvidia block and the Target block?
(((pres be.v) (the.d (|Toyota| block.n)) (between.p ((the.d (|Nvidia| block.n)) and.cc (the.d (|Target| block.n))))) ?)

; Is the SRI block fully on top of any red block?
(((pres be.v) (the.d (|SRI| block.n)) (fully.adv-a (on_top_of.p (any.d (red.a block.n))))) ?)

; Does the Toyota block face the Nvidia block?
(((pres do.aux-s) (the.d (|Toyota| block.n)) (face.v (the.d (|Nvidia| block.n)))) ?)

; Does the tallest stack have a red block on top?
(((pres do.aux-s) (the.d ((most-n tall.a) stack.n)) (have.v (a.d (red.a block.n)) (on_top_of.p *ref))) ?)

; Is the Toyota block a part of some stack?
(((pres be.v) (the.d (|Toyota| block.n)) (= (a.d (part-of.n (some.d stack.n))))) ?)

; Is the Target block a part of some row?
(((pres be.v) (the.d (|Target| block.n)) (= (a.d (part-of.n (some.d row.n))))) ?)

; Does any row contain a red block?
(((pres do.aux-s) (any.d row.n) (contain.v (a.d (red.a block.n)))) ?)

; Are any two green blocks touching?
(((pres prog) (any.d (two.a (green.a (plur block.n)))) touch.v) ?)

; Are any two stacks near each other?
(((pres be.v) (any.d (two.a (plur stack.n))) (near.p each_other.pro)) ?) 

; Does the SRI block have anything on it?
(((pres do.aux-s) (the.d (|SRI| block.n)) (have.v anything.pro (on.p it.pro))) ?)

; Are the Nvidia and the SRI blocks in the same stack?
(((pres be.v) (the.d ((|Nvidia| and.cc |SRI|) (plur block.n))) (in.p (the.d (same.a stack.n)))) ?)

; Is the Toyota block below the Texaco block?
(((pres be.v) (the.d (|Toyota| block.n)) (below.p (the.d (|Texaco| block.n)))) ?)

; Is the Starbucks block on top of any row?
(((pres be.v) (the.d (|Starbucks| block.n)) (on_top_of.p (any.d row.n))) ?)

; Are the Nvidia and the McDonalds blocks side by side?
(((pres be.v) ((the.d (|Nvidia| (plur {block}.n))) and.cc (the.d (|McDonalds| (plur block.n)))) side_by_side.a) ?)

; Are all the red blocks near the Nvidia block?
(((pres be.v) (all.d ({of}.p (the.d (red.a (plur block.n))))) (near.p (the.d (|Nvidia| block.n)))) ?)

; Is every blue block behind some other block?
(((pres be.v) (every.d (blue.a block.n)) (behind.p (some.d (other.a block.n)))) ?)

; Is the Texaco block between any two blocks?
(((pres be.v) (the.d (|Texaco| block.n)) (between.p (any.d (two.a (plur block.n))))) ?)

; Is the Target block slightly to the left of some red block?
(((pres be.v) (the.d (|Target| block.n)) (slightly.adv-a (to_the_left_of.p (some.d (red.a block.n))))) ?)

; Is there a block between the McDonalds and the SRI blocks?
(((pres be.v) there.pro (a.d (n+preds block.n (between.p ((the.d (|McDonalds| (plur {block}.n))) and.cc (the.d (|SRI| (plur block.n)))))))) ?)

; Is there a block near the Target block?
(((pres be.v) there.pro (a.d (n+preds block.n (near.p (the.d (|Target| block.n)))))) ?)

; Is there a red block near a blue block?
(((pres be.v) there.pro (a.d (n+preds (red.a block.n) (near.p (a.d (blue.a block.n)))))) ?)

; Is there a block touching the Nvidia block?
(((pres be.v) there.pro (a.d (n+preds block.n (touch.v (the.d (|Nvidia| block.n)))))) ?)

; Is there anything at the front left corner of the table?
(((pres be.v) there.pro (any.d (n+preds thing.n (at.p (the.d (front.a (left.a (corner-of.n (the.d table.n))))))))) ?)

; Is there a row consisting of three blocks?
(((pres be.v) there.pro (a.d (n+preds row.n (consist_of.v (three.d (plur block.n)))))) ?)

; Is there a block facing the front right corner of the table?
(((pres be.v) there.pro (a.d (n+preds block.n (face.v (the.d (front.a (right.a (corner-of.n (the.d table.n))))))))) ?)

; Is there a block facing the front edge of the table?
(((pres be.v) there.pro (a.d (n+preds block.n (face.v (the.d (front.a (edge-of.n (the.d table.n)))))))) ?)

; Are there two blocks facing each other?
(((pres be.v) there.pro (two.d (n+preds (plur block.n) (face.v each_other.pro)))) ?)

; Is there a block in the middle of the table?
(((pres be.v) there.pro (a.d (n+preds block.n (in.p (the.d (middle-of.n (the.d table.n))))))) ?)

; Is there a stack near the center of the table?
(((pres be.v) there.pro (a.d (n+preds stack.n (near.p (the.d (center-of.n (the.d table.n))))))) ?)

; Are there two stacks that are side by side?
(((pres be.v) there.pro (two.d (n+preds (plur stack.n) (that.rel ((pres be.v) side_by_side.a))))) ?)

; Is there a shortest stack on the table?
(((pres be.v) there.pro (a.d (n+preds ((most-n short.a) stack.n) (on.p (the.d table.n))))) ?)

; Is there a block on the left side of the table?
(((pres be.v) there.pro (a.d (n+preds block.n (on.p (the.d (left.a (side-of.n (the.d table.n)))))))) ?)

; Is there a block that is side by side with the Nvidia block?
(((pres be.v) there.pro (a.d (n+preds block.n (that.rel ((pres be.v) (side_by_side_with.p (the.d (|Nvidia| block.n)))))))) ?)

; Is there a block that is side by side with any red block?
(((pres be.v) there.pro (a.d (n+preds block.n (that.rel ((pres be.v) (side_by_side_with.p (any.d (red.a block.n)))))))) ?)

; Is there a block that is below two blue blocks?
(((pres be.v) there.pro (a.d (n+preds block.n (that.rel ((pres be.v) (below.p (two.d (blue.a (plur block.n))))))))) ?)

; Is there a block on top of any stack?
(((pres be.v) there.pro (a.d (n+preds block.n (on_top_of.p (any.d stack.n))))) ?)

; Are there two blocks that are not near each other?
(((pres be.v) there.pro (two.d (n+preds (plur block.n) (that.rel ((pres be) not.adv-s (near.p each_other.pro)))))) ?)

; Is there a block close to any stack?
(((pres be.v) there.pro (a.d (n+preds block.n (close_to.p (any.d stack.n))))) ?)

; Where is the Toyota block?
((sub where.a ((the.d (|Toyota| block.n)) ((pres be.v) *h))) ?)

; Where is some blue block?
((sub where.a ((some.d (blue.a block.n)) ((pres be.v)  *h))) ?)

; Where is the leftmost red block? 
((sub where.a ((the.d ((most-n left.a) (red.a block.n))) ((pres be.v)  *h))) ?)

; Where is any clear block?
((sub where.a ((any.d (clear.a block.n)) ((pres be.v)  *h))) ?)

; Where is the shortest stack?
((sub where.a ((the.d ((most-n short.a) stack.n)) ((pres be.v) *h))) ?)

; Where is the highest block?
((sub where.a ((the.d ((most-n high.a) block.n)) ((pres be.v) *h))) ?)

; What color is the block to the left of the Nvidia block?
((sub (what.d color.n) ((the.d (n+preds block.n (to_the_left_of.p (the.d (|Nvidia| block.n))))) ((pres be.v) (= *h)))) ?)

; What color is the block that is near the leftmost red block?
((sub (what.d color.n) ((the.d (n+preds block.n (that.rel ((pres be.v) (near.p (the.d ((most-n left.a) (red.a block.n)))))))) ((pres be.v) (= *h)))) ?)

; What color are the blocks near to the Toyota block?
((sub (what.d color.n) ((the.d (n+preds (plur block.n) (near_to.p (the.d (|Toyota| block.n))))) ((pres be.v) (= *h)))) ?)

; What color is the block close to the front edge of the table?
((sub (what.d color.n) ((the.d (n+preds block.n (close_to.p (the.d (front.a (edge-of.n (the.d table.n))))))) ((pres be.v) (= *h)))) ?)

; What color are the blocks near any edge of the table?
((sub (what.d color.n) ((the.d (n+preds (plur block.n) (near.p (any.d (edge-of.n (the.d table.n)))))) ((pres be.v)  (= *h)))) ?)

; What color are the blocks in the rightmost stack?
((sub (what.d color.n) ((the.d (n+preds (plur block.n) (in.p (the.d ((most-n right.a) stack.n))))) ((pres be.v) (= *h)))) ?)

; What color is the middle block in the longest row?
((sub (what.d color.n) ((the.d (n+preds (middle.a block.n) (in.p (the.d ((most-n long.a) row.n))))) ((pres be.v) (= *h)))) ?)

; What colors are the blocks that are under some blue block?
((sub (what.d (plur color.n)) ((the.d (n+preds (plur block.n) (that.rel ((pres be.v) (under.p (some.d (blue.a (plur block.n)))))))) ((pres be.v) (= *h)))) ?)

; What color is the lowest block of the shortest stack?
((sub (what.d color.n) ((the.d (n+preds ((most-n low.a) block.n) (of.p (the.d ((most-n short.a) stack.n))))) ((pres be.v) (= *h)))) ?)

; What color is the last block in the leftmost row?
((sub (what.d color.n) ((the.d (n+preds (last.a block.n) (in.p (the.d ((most-n left.a) row.n))))) ((pres be.v) (= *h)))) ?)

; What is the height of the leftmost stack?
((what.pro ((pres be.v) (= (the.d (height-of.n (the.d ((most-n left.a) stack.n))))))) ?)

; What is the length of the longest row?
((what.pro ((pres be.v) (= (the.d (length-of.n (the.d ((most-n long.a) row.n))))))) ?)

; What direction is the Toyota block facing?
((sub (what.d direction.n) ((pres prog) (the.d (|Toyota| block.n)) (face.v *h))) ?)

